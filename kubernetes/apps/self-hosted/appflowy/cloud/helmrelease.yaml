---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app appflowy-cloud
spec:
  interval: 30m
  chartRef:
    kind: OCIRepository
    name: app-template
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  dependsOn:
    - name: appflowy-gotrue
      namespace: self-hosted
    - name: appflowy-ai
      namespace: self-hosted
    - name: appflowy-minio
      namespace: self-hosted
  values:
    controllers:
      *app :
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          main:
            image:
              repository: appflowyinc/appflowy_cloud
              tag: 0.9.99@sha256:e59ede64afc086cba0393e9f938e6c5ce7bd91c2fe82e267201dc25a34f06ccd
            env:
              LOG_LEVEL: "info"
              APPFLOWY_WORKER_ENVIRONMENT: "production"
              APPFLOWY_REDIS_URI: "redis://dragonfly-appflowy:6379"
              APPFLOWY_GOTRUE_BASE_URL: "http://appflowy-gotrue:9999"
              APPFLOWY_S3_CREATE_BUCKET: "true"
              APPFLOWY_S3_USE_MINIO: "true"
              APPFLOWY_S3_MINIO_URL: "http://appflowy-minio:9000"
              APPFLOWY_S3_REGION: "us-east-1"
              APPFLOWY_MAILER_SMTP_TLS_KIND: "wrapper"
              APPFLOWY_ACCESS_CONTROL: "true"
              APPFLOWY_COLLABORATE_REMOVE_BATCH_SIZE: "100"
              APPFLOWY_COLLAB_GROUP_PERSISTENCE_INTERVAL: "60"
              APPFLOWY_COLLAB_GROUP_GRACE_PERIOD_SECS: "60"
              APPFLOWY_INDEXER_ENABLED: "true"
              APPFLOWY_WEB_URL: "https://appflowy.${SECRET_DOMAIN}"
              AI_SERVER_HOST: "appflowy-ai"
              AI_SERVER_PORT: "5001"
            envFrom:
              - secretRef:
                  name: *app
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  tcpSocket:
                    port: &port 8000
                  initialDelaySeconds: 30
                  periodSeconds: 30
                  timeoutSeconds: 10
                  failureThreshold: 6
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [10000]
        seccompProfile: { type: RuntimeDefault }
    service:
      main:
        controller: *app
        ports:
          http:
            port: *port
    ingress:
      *app :
        enabled: true
        className: "ingress-nginx"
        annotations:
          nginx.ingress.kubernetes.io/proxy-read-timeout: "86400"
        hosts:
          - host: board.noms.tv
            paths:
              - path: /api
                service:
                  identifier: main
                  port: http
              - path: /ws
                service:
                  identifier: main
                  port: http
